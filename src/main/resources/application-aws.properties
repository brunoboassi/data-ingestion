spring.main.web-application-type=none

spring.kafka.consumer.bootstrap-servers=${KAFKA_BOOTSTRAP}
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.fetch-max-wait=500
spring.kafka.consumer.fetch-min-size=8388608
spring.kafka.consumer.group-id=data-ingestion
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.max-poll-records=10000
spring.kafka.consumer.properties.fetch.max.bytes=8388608
spring.kafka.consumer.properties.max.partition.fetch.bytes=8388608
spring.kafka.consumer.properties.receive.buffer.bytes=102400
spring.kafka.consumer.properties.send.buffer.bytes=102400
spring.kafka.consumer.properties.session.timeout.ms=15000
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.ssl.protocol=SSL
spring.kafka.consumer.ssl.trust-store-location=file:kafka.client.truststore.jks
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.listener.ack-mode=BATCH
spring.kafka.listener.concurrency=10
spring.kafka.properties.security.protocol=SSL

data.ingestion.producer.topic=generate

spring.elasticsearch.rest.uris=https://${ELASTICSEARCH_URIS}
spring.elasticsearch.rest.refresh-policy=wait_for

logging.level.com.amazonaws.util.EC2MetadataUtils=error
logging.level.io.micrometer=INFO
management.metrics.enable.all=false
management.metrics.enable.elasticsearch=true
management.metrics.enable.kafka=true
management.metrics.enable.jvm=true
management.metrics.enable.process=true

management.metrics.use-global-registry=true
management.metrics.export.cloudwatch.enabled=true
management.metrics.export.cloudwatch.step=60s
management.metrics.export.cloudwatch.namespace=${CLOUDWATCH_NAMESPACE}
management.metrics.export.cloudwatch.batchSize=50

cloud.aws.stack.auto=false